#include "ManagerIoctlFunctions.h"
#include "Common.h"
#include "UtilFunctions.h"

namespace manager {

NTSTATUS ioctlDispatchCreateVirtualStorage(PDEVICE_OBJECT deviceObject, PIRP irp, PIO_STACK_LOCATION stackLocation) {
	NTSTATUS status = STATUS_SUCCESS;
	const auto inputBuffer = reinterpret_cast<char*>(irp->AssociatedIrp.SystemBuffer);
	const auto length = stackLocation->Parameters.DeviceIoControl.InputBufferLength;
	IoctlCreateVirtualStorageParameter* inputParameter = nullptr;
	HANDLE fileHandle = nullptr;
	UNICODE_STRING fileName;
	PDEVICE_OBJECT device = nullptr;
	VirtualStorageDeviceExtension* deviceExtension = nullptr;
	TRACE("ioctlDispatchCreateVirtualStorage called");
	
	TRACE("Verifying parameters");
	CHECK_AND_SET_STATUS((inputBuffer && length), STATUS_INVALID_PARAMETER, "No input buffer provided");
	CHECK_AND_SET_STATUS((length > sizeof(IoctlCreateVirtualStorageParameter)), STATUS_BUFFER_TOO_SMALL, "Input buffer too small");
	inputParameter = reinterpret_cast<IoctlCreateVirtualStorageParameter*>(inputBuffer);
	CHECK_AND_SET_STATUS(((inputParameter->size + sizeof(IoctlCreateVirtualStorageParameter)) <= length) &&
		((inputParameter->size + sizeof(IoctlCreateVirtualStorageParameter)) > inputParameter->size),
		STATUS_INVALID_PARAMETER, "Size mismatch or integer overflow");
	
	fileName.Length = inputParameter->size;
	fileName.MaximumLength = inputParameter->size;
	fileName.Buffer = inputParameter->path;
	CHECK_STATUS(openFile(&fileName, GENERIC_READ | GENERIC_WRITE, 0, &fileHandle), "openFile failed");
	TRACE("Creating virtual storage device");
	CHECK_STATUS(IoCreateDevice(deviceObject->DriverObject, sizeof(VirtualStorageDeviceExtension), nullptr, FILE_DEVICE_DISK,
	FILE_DEVICE_SECURE_OPEN | FILE_AUTOGENERATED_DEVICE_NAME, false, &device), "IoCreateDevice failed");
	deviceExtension = reinterpret_cast<VirtualStorageDeviceExtension*>(device->DeviceExtension);
	deviceExtension->header.type = DeviceType::VIRTUAL_STORAGE;
	deviceExtension->fileHandle = fileHandle;
	device->Vpb->Flags |= VPB_RAW_MOUNT;
	device->Flags |= DO_BUFFERED_IO;
	device->Flags &= ~DO_DEVICE_INITIALIZING;
	CHECK_STATUS(IoVerifyVolume(device, true), "IoVerifyVolume failed");
cleanup:
	if (!NT_SUCCESS(status)) {
		DELETE_IF_NOT_NULL(device, IoDeleteDevice);
		DELETE_IF_NOT_NULL(fileHandle, ZwClose);
	}
	irp->IoStatus.Status = status;
	irp->IoStatus.Information = 0;
	return STATUS_SUCCESS;
}

}